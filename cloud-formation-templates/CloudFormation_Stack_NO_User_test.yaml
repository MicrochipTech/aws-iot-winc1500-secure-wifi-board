
Resources:
  ZTLambdaJITRRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
      Path: "/"
      Policies:
        - PolicyName: "ZTLambdaJITRPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "iot:UpdateCertificate"
                  - "iot:CreatePolicy"
                  - "iot:AttachPrincipalPolicy"
                  - "iot:CreateThing"
                  - "iot:CreateThingType"
                  - "iot:DescribeCertificate"
                  - "iot:DescribeCaCertificate"
                  - "iot:DescribeThing"
                  - "iot:DescribeThingType"
                  - "iot:GetPolicy"
                Resource: "*"
      RoleName: ZTLambdaJITRRole

                  
  ZTIoTJITRRule:
    Type: "AWS::IoT::TopicRule"
    Properties: 
      RuleName: ZeroTouchJustInTime
      TopicRulePayload: 
        RuleDisabled: false
        Sql: >-
          SELECT * FROM '$aws/events/certificates/registered/#'
        Actions: 
          - Lambda: 
              FunctionArn: !GetAtt ZTLambdaJITR.Arn

  ZTIoTLambdaInvokePerms: 
    Type: "AWS::Lambda::Permission"
    Properties: 
      FunctionName: !GetAtt ZTLambdaJITR.Arn
      Action: "lambda:InvokeFunction"
      Principal: "iot.amazonaws.com"
      
      
  ZTLambdaJITR:
    Type: AWS::Lambda::Function
    Properties:
      Handler: "index.lambda_handler"
      Role: !GetAtt ZTLambdaJITRRole.Arn
      Runtime: "python3.6"
      Timeout: 30
      Code:
        ZipFile: |
          import os
          import base64
          import binascii
          import json
          import boto3
          import botocore
          iot = boto3.client('iot')
          ZT_THING_TYPE_NAME = 'microchip-zero-touch-kit'
          def lambda_handler(event, context):
              region = os.environ['AWS_DEFAULT_REGION']
              account_id = event['awsAccountId']
              certificate_id = event['certificateId']
              response = iot.describe_certificate(certificateId=certificate_id)
              certificate_arn = response['certificateDescription']['certificateArn']
              pem_lines = response['certificateDescription']['certificatePem'].split('\n')
              pem_lines = list(filter(None, pem_lines))
              raw_pem = ''.join(pem_lines[1:-1])
              cert_der = base64.standard_b64decode(raw_pem)
              subj_key_id_prefix = b'\x30\x1D\x06\x03\x55\x1D\x0E\x04\x16\x04\x14'
              subj_key_id_index = cert_der.index(subj_key_id_prefix) + len(subj_key_id_prefix)
              subj_key_id = binascii.b2a_hex(cert_der[subj_key_id_index:subj_key_id_index+20]).decode('ascii')
              print('Certificate Subject Key ID: {}'.format(subj_key_id))
              thing_name = subj_key_id
              client_id = subj_key_id
              response = iot.create_thing_type(thingTypeName=ZT_THING_TYPE_NAME)
              response = iot.create_thing(thingName=thing_name,thingTypeName=ZT_THING_TYPE_NAME)
              policy_name = 'ZTPolicy_{}'.format(certificate_id)
              policy_document = {
                  'Version': '2012-10-17',
                  'Statement': [
                      {
                          'Effect': 'Allow',
                          'Action': [
                              'iot:Connect'
                          ],
                          'Resource': [
                              'arn:aws:iot:{}:{}:client/*'.format(region, account_id)
                          ]
                      },
                      {
                          'Effect': 'Allow',
                          'Action': [
                              'iot:Publish',
                              'iot:Receive'
                          ],
                          'Resource': [
                              'arn:aws:iot:{}:{}:topic/$aws/things/*/shadow/*'.format(region, account_id)
                          ]
                      },
                      {
                          'Effect': 'Allow',
                          'Action': [
                              'iot:Subscribe'
                          ],
                          'Resource': [
                              'arn:aws:iot:{}:{}:topicfilter/$aws/things/*/shadow/*'.format(region, account_id)
                          ]
                      },
                      {
                          'Effect': 'Allow',
                          'Action': [
                              'iot:UpdateThingShadow',
                              'iot:GetThingShadow'
                          ],
                          'Resource': [
                              'arn:aws:iot:{}:{}:topic/$aws/things/*/shadow/*'.format(region, account_id)
                          ]
                      }
                  ]
              }
              try:
                  response = iot.create_policy(
                      policyName=policy_name,
                      policyDocument=json.dumps(policy_document, indent=4))
                  print('Created policy {}'.format(policy_name))
              except botocore.exceptions.ClientError as e:
                  if e.response['Error']['Code'] == 'ResourceAlreadyExistsException':
                      print('Policy {} already exists'.format(policy_name))
                  else:
                      raise
              iot.attach_principal_policy(
                  policyName=policy_name,
                  principal=certificate_arn)
              response = iot.update_certificate(
                  certificateId=certificate_id,
                  newStatus='ACTIVE')

  SensorBoardSolution:
    Type: AWS::Lambda::Function
    Properties:
      Handler: "index.lambda_handler"
      Role: !GetAtt ZTLambdaJITRRole.Arn
      Runtime: "node.js6.10"
      Timeout: 30
      Code:
        ZipFile: |
          'use strict';
          
          /* ----------------------- IoT Configuration -------------------------------- */

var config = {};

 //config.IOT_BROKER_ENDPOINT = "a1nwxjdmwiwtr2.iot.us-east-1.amazonaws.com".toLowerCase();
 config.IOT_BROKER_ENDPOINT = "at5oi5gztccgr.iot.us-east-1.amazonaws.com".toLowerCase();

 config.IOT_BROKER_REGION = "us-east-1";

 config.IOT_THING_NAME = "89600207b3eba6d86e2847a136ad18128eb7f1a7";

 // Load AWS SDK libraries
 var AWS = require('aws-sdk');

 AWS.config.region = config.IOT_BROKER_REGION;

 // Initialize client for IoT
 var iotData = new AWS.IotData({endpoint:config.IOT_BROKER_ENDPOINT});

 /* -------------------- end:IoT Configuration ------------------------------ */

 /* ------------ Helpers that build all of the responses --------------------- */

 function buildSpeechletResponse(title, output, repromptText, shouldEndSession)
 {
 var response =     {
        outputSpeech:{
            type:'PlainText',
            text:output,
            ssml:"<speak> " + output + " </speak>"
        },
        card:{
            type:'Simple',
            title:`Sensor Board`,
            content:output,
        },
        reprompt:{
            outputSpeech:{
                type:'PlainText',
                text:repromptText,
            },
        },
        shouldEndSession,
    };
    return response;

 }

 function buildResponse(sessionAttributes, speechletResponse)
 {
 var response =     {
        version:'1.0',
        sessionAttributes,
        response:speechletResponse,
    };
    return response;


 }

 /* ---------- end:Helpers that build all of the responses ------------------ */

 /* ----------- Functions that control the skill's behavior ------------------ */

 function getWelcomeResponse(callback)
 {

    // If we wanted to initialize the session to have some attributes we could add those here.
    const sessionAttributes = {Session:"New session"};
    const cardTitle = 'Welcome';
    const speechOutput = 'Welcome to Microchip Sensor board dry 10. ';
            
    // If the user either does not reply to the welcome message or says something that is not understood, they will be prompted again with this text.
    const repromptText = 'Please tell me if you want the light on or off by saying, turn the light on';
    const shouldEndSession = false;

    callback(sessionAttributes, buildSpeechletResponse(cardTitle, speechOutput, repromptText, shouldEndSession));

 }

 getHelpResponse
 function getHelpResponse(callback)
 {

    // If we wanted to initialize the session to have some attributes we could add those here.
    const sessionAttributes = {};
    const cardTitle = 'Help';
    const speechOutput = 'The options are. Ask Sensor board to turn the light red, green, blue, yellow, on or off.'+
                            ' You can ask what is the temperature or humidity,'+
                            ' the light state or color,' +
                            ' or you can ask what are the buttons state.';
            
    // If the user either does not reply to the welcome message or says something that is not understood, they will be prompted again with this text.
    const repromptText = 'Please tell me if you want the light on or off by saying, turn the light on';
    const shouldEndSession = false;

    callback(sessionAttributes, buildSpeechletResponse(cardTitle, speechOutput, repromptText, shouldEndSession));

 }


 function createFavoriteLEDStatusAttributes(desiredLEDStatus)
 {
 var response =     {
        desiredLEDStatus,
    };
    
    return response;


 }

 /**
 * Sets the relay state in the session and prepares the speech to reply to the user.
 */
 function setLEDState(intent, session, callback)
 {

    const cardTitle = intent.name;
    const desiredLEDStatusSlot = intent.slots.Status;
    let shadowLED_R = 0;
    let shadowLED_G = 0;
    let shadowLED_B = 0;
    let repromptText = '';
    let sessionAttributes = {};                                    
                                    
    const shouldEndSession = false;
    let speechOutput = '';


    if (desiredLEDStatusSlot)
    {

        const desiredLEDStatus = desiredLEDStatusSlot.value;
        sessionAttributes = createFavoriteLEDStatusAttributes(desiredLEDStatus);
        
        repromptText = ""; //You can ask me if the light is on or off by saying, is the light on or off?";
        

        
        
        if ((desiredLEDStatus == 'red'))
        {
            shadowLED_R = 1;
            shadowLED_G = 0;
            shadowLED_B = 0;
            speechOutput = "The Sensor board light is red" ;
            
        }else
        if ((desiredLEDStatus == 'green'))
        {
            shadowLED_R = 0;
            shadowLED_G = 1;
            shadowLED_B = 0;
            speechOutput = "The Sensor board  light is green" ;
            
        }else
        if ((desiredLEDStatus == 'blue'))
        {
            shadowLED_R = 0;
            shadowLED_G = 0;
            shadowLED_B = 1;
            speechOutput = "The Sensor board light is blue" ;
            
        }else
        if ((desiredLEDStatus == 'yellow'))
        {
            shadowLED_R = 1;
            shadowLED_G = 1;
            shadowLED_B = 0;
            speechOutput = "The Sensor board  light is yellow" ;
            
        }else
        if ((desiredLEDStatus == 'white')||(desiredLEDStatus == 'on')||(desiredLEDStatus == 'open'))
        {
            shadowLED_R = 1;
            shadowLED_G = 1;
            shadowLED_B = 1;
            speechOutput = "The Sensor board  light is " + desiredLEDStatus;
            
        }else
        if ((desiredLEDStatus == 'off')||(desiredLEDStatus == 'close'))
        {
            shadowLED_R = 0;
            shadowLED_G = 0;
            shadowLED_B = 0;
            speechOutput = "The Sensor board  light has been turned off" ;
            
        }else
        {
            speechOutput = "I'm not sure what you want. Please try again.";
            repromptText = "I'm not sure what you want. You can tell me if you " +
                'want the light blue, red, green, white or off';
            callback(sessionAttributes, buildSpeechletResponse(cardTitle, speechOutput, repromptText, shouldEndSession));
            return;
        }
        
        /*
         * Update AWS IoT
         */
        
        console.log("Alexa will say =>",speechOutput);
        var payloadObj = {"state":{
            "desired":{
              "LED_R":shadowLED_R,
              "LED_G":shadowLED_G,
               "LED_B":shadowLED_B
                    
                }}};

        //Prepare the parameters of the update call
        var paramsUpdate = {

            "thingName":config.IOT_THING_NAME,
            "payload":JSON.stringify(payloadObj)

        };

        // Update IoT Device Shadow
        console.log("AWS-IOT => ",paramsUpdate);
        
        iotData.updateThingShadow(paramsUpdate, function(err, data)
        {

            if (err)
            {
                console.log(err); // Handle any errors
            } else
            {
                console.log("UpdateThingShadow=>",data);
                console.log("Calling callback from updateThingShadow returns");
                
                callback(sessionAttributes, buildSpeechletResponse(cardTitle, speechOutput, repromptText, shouldEndSession));
                //context.succeed(buildResponse(sessionAttributes, buildSpeechletResponse(cardTitle, speechOutput, repromptText, shouldEndSession)));
            
                console.log("buildSpeechletResponse returns =>",buildSpeechletResponse(cardTitle, speechOutput, repromptText, shouldEndSession));
                console.log("returning from callback from updateThingShadow returns");
                
            }

        });
        
        
    } else
    {

        speechOutput = "I'm not sure if you want the light on or off. Please try again.";
        repromptText = "I'm not sure if you want the light on or off. You can tell me if you " +
                'want the light on or off by saying, turn the light on';

    }

    //callback(sessionAttributes, buildSpeechletResponse(cardTitle, speechOutput, repromptText, shouldEndSession));

 }

 function getLEDStatusFromShadow(intent, session, callback) {

    let desiredLEDStatus ="Test";
    const repromptText = null;
    const sessionAttributes = {};
    let shouldEndSession = false;
    let speechOutput = '';


    
    //Prepare the parameters of the update call
    var paramsUpdate = {
        "thingName":config.IOT_THING_NAME,
        //"payload":JSON.stringify(payloadObj)
    };
    console.log("thingName=>",config.IOT_THING_NAME);
    iotData.getThingShadow(paramsUpdate, function(err, data)
        {

            if (err)
            {
                console.log(err); // Handle any errors
            } else
            {
                console.log(data);
                var newdata = JSON.parse(data.payload);
                console.log("LED RED state is =>",newdata.state.reported.LED_R);
                console.log("LED GREEN state is =>",newdata.state.reported.LED_G);
                console.log("LED BLEU state is =>",newdata.state.reported.LED_B);
                //console.log("LED state is =>",data.payload);
                var redLED = newdata.state.reported.LED_R;
                var greenLED = newdata.state.reported.LED_G;
                var blueLED = newdata.state.reported.LED_B;
                var ledState;
                
                if (intent.slots.lightType.value == "state")
                {
                    if(redLED == 0 && greenLED == 0 && blueLED == 0)
                        ledState ="off";
                    else
                        ledState ="on";
                    
                    speechOutput = `The Sensor Board light is ${ledState}.`
                
                }else
                if (intent.slots.lightType.value == "color")
                {
                    if (redLED == 1 && greenLED == 0 && blueLED == 0)
                        ledState = "red";
                    else 
                    if (redLED == 0 && greenLED == 1 && blueLED == 0)
                        ledState = "green";
                    else 
                    if (redLED == 0 && greenLED == 0 && blueLED == 1)
                        ledState = "blue";
                    else 
                    if (redLED == 1 && greenLED == 1 && blueLED == 1)
                        ledState = "white";
                    else 
                    if (redLED == 0 && greenLED == 0 && blueLED == 0)
                        ledState = "black";
                    else 
                    if (redLED == 1 && greenLED == 1 && blueLED == 0)
                        ledState = "yellow";
                    
                    speechOutput = `The Sensor Board light is ${ledState}.`
                
                }else
                    speechOutput = "Ask me, what is the light color or state";
     
                
                
                //shouldEndSession = true;
                console.log("UpdateThingShadow=>",data);
                console.log("Calling callback from updateThingShadow returns");
                
                callback(sessionAttributes, buildSpeechletResponse(intent.name, speechOutput, repromptText, shouldEndSession));
                //callback(sessionAttributes, buildSpeechletResponse(cardTitle, speechOutput, repromptText, shouldEndSession));
                
                console.log("buildSpeechletResponse returns =>",buildSpeechletResponse(intent.name, speechOutput, repromptText, shouldEndSession));
                console.log("returning from callback from updateThingShadow returns");
                
            }

        });


    // Setting repromptText to null signifies that we do not want to reprompt the user.
    // If the user does not respond or says something that is not understood, the session
    // will end.
    //callback(sessionAttributes, buildSpeechletResponse(intent.name, speechOutput, repromptText, shouldEndSession));

 }
 function getButtonStatusFromShadow(intent, session, callback) {

    let desiredLEDStatus;
    const repromptText = null;
    const sessionAttributes = {};
    let shouldEndSession = false;
    let speechOutput = '';


    
    //Prepare the parameters of the update call
    var paramsUpdate = {
        "thingName":config.IOT_THING_NAME,
        //"payload":JSON.stringify(payloadObj)
    };
    
    iotData.getThingShadow(paramsUpdate, function(err, data)
        {

            if (err)
            {
                console.log(err); // Handle any errors
            } else
            {
                console.log(data);
                var newdata = JSON.parse(data.payload);
                console.log("BUTTON_1 state is =>",newdata.state.reported.BUTTON_1);
                console.log("BUTTON_2 state is =>",newdata.state.reported.BUTTON_2);
                console.log("BUTTON_3 state is =>",newdata.state.reported.BUTTON_3);
                //console.log("LED state is =>",data.payload);
                var buttonstate = newdata.state.reported.setLED;
                var button1 = "up";
                var button2 = "up";
                var button3 = "up";
                if (newdata.state.reported.BUTTON_1 == 0)
                    button1 = "down";
                if (newdata.state.reported.BUTTON_2 == 0)
                    button2 = "down";
                if (newdata.state.reported.BUTTON_3 == 0)
                    button3 = "down";
                speechOutput = "The button states are, button1 is "+ button1 +
                                                    ",button2 is " + button2 +
                                                    ",button3 is " + button3;
                //shouldEndSession = true;
                callback(sessionAttributes, buildSpeechletResponse(intent.name, speechOutput, repromptText, shouldEndSession));

            }

        });


    // Setting repromptText to null signifies that we do not want to reprompt the user.
    // If the user does not respond or says something that is not understood, the session
    // will end.
    //callback(sessionAttributes, buildSpeechletResponse(intent.name, speechOutput, repromptText, shouldEndSession));

 }
 function getSensorStatusFromShadow(intent, session, callback) {

    let desiredLEDStatus;
    const repromptText = null;
    const sessionAttributes = {};
    let shouldEndSession = false;
    let speechOutput = '';


    
    //Prepare the parameters of the update call
    var paramsUpdate = {
        "thingName":config.IOT_THING_NAME,
        //"payload":JSON.stringify(payloadObj)
    };
    
    iotData.getThingShadow(paramsUpdate, function(err, data)
        {

            if (err)
            {
                console.log(err); // Handle any errors
            } else
            {
                console.log(data);
                var newdata = JSON.parse(data.payload);
                console.log("Temperature value is =>",newdata.state.reported.temp);
                console.log("BUTTON_2 state is =>",newdata.state.reported.hum);
                //console.log("LED state is =>",data.payload);
                
                if (intent.slots.sensorType.value == "temperature")
                {
                    speechOutput = 'The temperature is '+ newdata.state.reported.temp/100;
                }else
                if (intent.slots.sensorType.value == "humidity")
                {
                    speechOutput = 'The humidity is '+ newdata.state.reported.hum + " percent";
                }else
                    speechOutput = 'Ask me,  what is the temperature or humidity';
                    
                //shouldEndSession = true;
                callback(sessionAttributes, buildSpeechletResponse(intent.name, speechOutput, repromptText, shouldEndSession));

            }

        });


    // Setting repromptText to null signifies that we do not want to reprompt the user.
    // If the user does not respond or says something that is not understood, the session
    // will end.
    //callback(sessionAttributes, buildSpeechletResponse(intent.name, speechOutput, repromptText, shouldEndSession));

 }

 /* --------- end:Functions that control the skill's behavior --------------- */


 /* ----------------------------- Events ------------------------------------- */

 /**
 * Called when the session starts.
 */
 function onSessionStarted(sessionStartedRequest, session)
 {
    console.log(`onSessionStarted requestId = ${sessionStartedRequest.requestId}, sessionId = ${session.sessionId}
    `);
 }

 /**
 * Called when the user launches the skill without specifying what they want.
 */
 function onLaunch(launchRequest, session, callback)
 {

    console.log(`onLaunch requestId = ${launchRequest.requestId}, sessionId = ${session.sessionId}
    `);

    // Dispatch to your skill's launch.
    console.log("Calling getWelcomeResponse");

    getWelcomeResponse(callback);

 }

 function handleSessionEndRequest(callback) {

    const cardTitle = 'Session Ended';
    const speechOutput = 'Thank you for using Microchip Sensor board demo. Have a nice day!';
    // Setting this to true ends the session and exits the skill.
    const shouldEndSession = true;

    callback({}, buildSpeechletResponse(cardTitle, speechOutput, null, shouldEndSession));

 }
 /**
 * Called when the user specifies an intent for this skill.
 */
 function onIntent(intentRequest, session, callback)
 {

    console.log(`onIntent requestId = ${intentRequest.requestId}, sessionId = ${session.sessionId}
    `);

    const intent = intentRequest.intent;
    const intentName = intentRequest.intent.name;
    
    console.log("inIntent =>",intentName);
    // Dispatch to your skill's intent handlers
    // Dispatch to your skill's intent handlers
    
    if (intentName === 'LEDStateChangeIntent') {
        setLEDState(intent, session, callback);
        
    }
    else if (intentName === 'WhatsLEDStatusIntent') {
        getLEDStatusFromShadow(intent, session, callback);
        
    }
    else if (intentName === 'WhatsButtonStatusIntent') {
        getButtonStatusFromShadow(intent, session, callback);
        
    }
    else if (intentName === 'WhatsSensorStatusIntent') {
        getSensorStatusFromShadow(intent, session, callback);
        
    }
    else if (intentName === 'AMAZON.HelpIntent') {
        getHelpResponse(callback);
        
    }
    else if (intentName === 'AMAZON.StopIntent' || intentName === 'AMAZON.CancelIntent') {
        handleSessionEndRequest(callback);
        
    } else if(intentName === 'closeSession')
    {
        handleSessionEndRequest(callback);
    }
    else {throw new Error('Invalid intent');}
 }

 /**
 * Called when the user ends the session.
 * Is not called when the skill returns shouldEndSession=true.
 */
 function onSessionEnded(sessionEndedRequest, session)
 {

    console.log(`onSessionEnded requestId = ${sessionEndedRequest.requestId}, sessionId = ${session.sessionId}
    `);
    // Add cleanup logic here

 }

 /* --------------------------- end:Events ---------------------------------- */


 /* -------------------------- Main handler ---------------------------------- */

 // Route the incoming request based on type (LaunchRequest, IntentRequest, etc.) The JSON body of the request is provided in the event parameter.
 exports.handler = (event, context, callback) =>
 {

    try{
        
        console.log("\rStarting handler =>\r");
        //return;
        console.log("Events", event);
        console.log("Context", context);
        console.log("callback", callback);
        
        
        /**
         * Uncomment this if statement and populate with your skill's application ID to
         * prevent someone else from configuring a skill that sends requests to this function.
         */
        /*
        if (event.session.application.applicationId !== 'amzn1.echo-sdk-ams.app.[unique-value-here]') {
             callback('Invalid Application ID');l
        }
         */

        if (event.request.type == 'LaunchRequest')
        {
            onLaunch(event.request,
                    event.session,
                    (sessionAttributes, speechletResponse) =>{
                        console.log("Returning from onLaunch");
                        //callback(null, buildResponse(sessionAttributes, speechletResponse));
                        context.succeed(buildResponse(sessionAttributes, speechletResponse));
            });
        } else if (event.request.type == 'IntentRequest')
        {
            onIntent(event.request,
                    event.session,
                    (sessionAttributes, speechletResponse) =>{
                        console.log("Returning from onIntent");
                        console.log("buildResponse returns =>",buildResponse(sessionAttributes, speechletResponse));
                        
                        //callback(null, buildResponse(sessionAttributes, speechletResponse));
                        context.succeed(buildResponse(sessionAttributes, speechletResponse));
            
                        console.log("Returning from callback");
                        
            });
        } else if (event.request.type == 'SessionEndedRequest')
        {
            onSessionEnded(event.request, event.session);
            callback();
        }


    }

    catch(err)
    {
        callback(err);
    }

 };

            /* ----------------------- end:Main handler -------------------------------- */